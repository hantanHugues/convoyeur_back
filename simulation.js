const axios = require('axios');

const SERVER_URL = 'http://localhost:5000';
const COLORS = ['green', 'yellow', 'red', 'blue'];

// Fonction pour obtenir un √©l√©ment al√©atoire d'un tableau
const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];

// Fonction pour obtenir un intervalle de temps al√©atoire
const getRandomInterval = () => {
    // Retourne un d√©lai fixe de 4 secondes (4000 ms) comme demand√©.
    return 4000;
}

let simulationInterval;

const simulateWasteDetection = async () => {
    const color = getRandomElement(COLORS);
    try {
        // Utilisation de l'endpoint de test pour simuler un √©v√©nement
        await axios.get(`${SERVER_URL}/api/test-increment/${color}`);
        console.log(`‚úÖ  Simulation : D√©tection d'un d√©chet [${color.toUpperCase()}] envoy√©e au serveur.`);
    } catch (error) {
        if (error.code === 'ECONNREFUSED') {
            console.error('‚ùå  Erreur de simulation : Impossible de se connecter au serveur. Est-il d√©marr√© sur le port 5000 ?');
            // Arr√™te la simulation si le serveur n'est pas joignable
            clearInterval(simulationInterval);
        } else {
            console.error(`‚ùå  Erreur lors de la simulation pour [${color}]:`, error.message);
        }
    }
    // R√©initialise l'intervalle pour le prochain √©v√©nement, cr√©ant un rythme plus naturel
    clearInterval(simulationInterval);
    simulationInterval = setInterval(simulateWasteDetection, getRandomInterval());
};

console.log("üöÄ D√©marrage de la simulation de d√©tection de d√©chets...");
console.log("   Le script enverra un √©v√©nement de couleur al√©atoire toutes les 4 secondes.");
console.log("   Assurez-vous que votre serveur principal (node index.js) est en cours d'ex√©cution.");
console.log("   Appuyez sur CTRL+C pour arr√™ter.");

// D√©marre la premi√®re simulation
simulationInterval = setInterval(simulateWasteDetection, getRandomInterval());
